package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"

	"cloud.google.com/go/civil"
	"github.com/humzamo/live-laugh-love/api/graph/generated"
	"github.com/humzamo/live-laugh-love/api/graph/model"
)

// UpdateRecord is the resolver for the updateRecord field.
func (r *mutationResolver) UpdateRecord(ctx context.Context, user string, date civil.Date) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdateRecord - updateRecord"))
}

// DeleteRecord is the resolver for the deleteRecord field.
func (r *mutationResolver) DeleteRecord(ctx context.Context, user string, date civil.Date) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteRecord - deleteRecord"))
}

// DeleteRecords is the resolver for the deleteRecords field.
func (r *mutationResolver) DeleteRecords(ctx context.Context, user string) (*string, error) {
	panic(fmt.Errorf("not implemented: DeleteRecords - deleteRecords"))
}

// RecordByUser is the resolver for the recordByUser field.
func (r *queryResolver) RecordByUser(ctx context.Context, user string, date civil.Date) (*model.Record, error) {
	panic(fmt.Errorf("not implemented: RecordByUser - recordByUser"))
}

// RecordsByUser is the resolver for the recordsByUser field.
func (r *queryResolver) RecordsByUser(ctx context.Context, user *string) ([]*model.Record, error) {
	panic(fmt.Errorf("not implemented: RecordsByUser - recordsByUser"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
